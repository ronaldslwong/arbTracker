package onchainSMB

import (
	//"context"
	"bytes"
	"encoding/base64"
	"encoding/binary"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"reflect"

	// "time"

	blockhashrefresh "arbTracker/blockhashRefresh"
	"arbTracker/configLoad"
	"arbTracker/globals"
	"arbTracker/types"

	"github.com/gagliardetto/solana-go"                                        // Updated import
	compute_budget "github.com/gagliardetto/solana-go/programs/compute-budget" // Updated import

	//"github.com/gagliardetto/solana-go/rpc"

	"github.com/gagliardetto/solana-go/programs/system"
)

// Struct to match the private key JSON format
type KeyFile struct {
	PrivateKey string `json:"private_key"`
}

type TokenPool struct {
	XMint          solana.PublicKey
	WalletXAccount solana.PublicKey //E1SsaCT4eaKATYKKDb9RCWAf9HsdTN5w3uhvvNgHyqbd
	RaydiumPools   []types.RaydiumPool
	RaydiumCPPools []types.RaydiumCPPool
	PumpPools      []types.PumpPool
	DLMMPairs      []types.DLMMTriple
}

const (
	FastURLEngines = "https://fast.circular.fi/transactions"
	FastTipPubkey  = "FAST3dMFZvESiEipBvLSiXq3QCV51o3xuoHScqRU6cB6"
	MinTipLamports = 1_001_000
	ApiKey         = "1630b5fe-762a-4476-83a8-d59fe816da93"
)

// Instruction Builder
func GenerateOnchainSwapInstruction(
	wallet, solMint, walletSolAccount solana.PublicKey,
	tokenProgram, systemProgram, associatedTokenProgram solana.PublicKey,
	tokenPools []TokenPool,
	programId solana.PublicKey,
	minimumProfit, maxBinToProcess uint64,
) *solana.GenericInstruction {

	feeCollector := solana.MustPublicKeyFromBase58("6AGB9kqgSp2mQXwYpdrV4QVV8urvCaDS35U1wsLssy6H")
	// xmint := solana.MustPublicKeyFromBase58("DPTP4fUfWuwVTgCmttWBu6Sy5B9TeCTBjc2YKgpDpump")

	accounts := []*solana.AccountMeta{
		solana.NewAccountMeta(wallet, true, true),
		solana.NewAccountMeta(solMint, false, false),
		solana.NewAccountMeta(feeCollector, true, false),
		solana.NewAccountMeta(walletSolAccount, true, false),
		solana.NewAccountMeta(tokenProgram, false, false),
		solana.NewAccountMeta(systemProgram, false, false),
		solana.NewAccountMeta(associatedTokenProgram, false, false), ///////
		// solana.NewAccountMeta(solana.MustPublicKeyFromBase58("LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo"), false, false),
	}

	for _, pool := range tokenPools {
		accounts = append(accounts,
			solana.NewAccountMeta(pool.XMint, false, false),
			solana.NewAccountMeta(pool.WalletXAccount, true, false),
		)

		// for _, r := range pool.RaydiumPools {
		// 	accounts = append(accounts,
		// 		solana.NewAccountMeta(r.ProgramId, false, false),
		// 		solana.NewAccountMeta(r.Authority, false, false),
		// 		solana.NewAccountMeta(r.AMM, false, false),
		// 		solana.NewAccountMeta(r.XVault, false, false),
		// 		solana.NewAccountMeta(r.SOLVault, false, false),
		// 	)
		// }

		// for _, cp := range pool.RaydiumCPPools {
		// 	accounts = append(accounts,
		// 		solana.NewAccountMeta(cp.ProgramId, false, false),
		// 		solana.NewAccountMeta(cp.Authority, false, false),
		// 		solana.NewAccountMeta(cp.Pool, false, false),
		// 		solana.NewAccountMeta(cp.AMMConfig, false, false),
		// 		solana.NewAccountMeta(cp.XVault, false, false),
		// 		solana.NewAccountMeta(cp.SOLVault, false, false),
		// 		solana.NewAccountMeta(cp.Observation, false, false),
		// 	)
		// }

		for _, p := range pool.PumpPools {
			accounts = append(accounts,
				solana.NewAccountMeta(p.ProgramId, true, false),
				solana.NewAccountMeta(p.GlobalConfig, false, false),
				solana.NewAccountMeta(p.Authority, false, false),
				solana.NewAccountMeta(p.FeeWallet, true, false),
				solana.NewAccountMeta(p.Pool, false, false),
				solana.NewAccountMeta(p.XAccount, true, false),
				solana.NewAccountMeta(p.SOLAccount, true, false),
				solana.NewAccountMeta(p.FeeTokenWallet, true, false),
			)
		}

		for _, d := range pool.DLMMPairs {
			accounts = append(accounts,
				solana.NewAccountMeta(d.DlmmProgramId, false, false),
				solana.NewAccountMeta(d.DlmmEventAuthority, true, false),
				solana.NewAccountMeta(d.Pair, true, false),
				solana.NewAccountMeta(d.XVault, true, false),
				solana.NewAccountMeta(d.SOLVault, true, false),
				solana.NewAccountMeta(d.Oracle, true, false),
			)
			for i := range d.BinArrays {
				accounts = append(accounts, &d.BinArrays[i])
			}
		}
	}
	// Prepare data
	data := []byte{10}
	buf := make([]byte, 8)
	binary.LittleEndian.PutUint64(buf, minimumProfit)
	data = append(data, buf...)
	binary.LittleEndian.PutUint64(buf, maxBinToProcess)
	data = append(data, buf...)

	// Directly return the GenericInstruction type
	instruction := solana.NewInstruction(
		programId, // Program ID
		accounts,  // Accounts
		data,      // Data
	)

	return instruction // Return the *solana.GenericInstruction

}

func SendTx(config configLoad.Config, tradeDetails types.TradeConfig) {
	// start := time.Now()

	walletPubkey := globals.PrivateKey.PublicKey()

	// wallet := solana.MustPublicKeyFromBase58(walletPubkey)
	mint := solana.MustPublicKeyFromBase58(tradeDetails.Mint)

	// t1 := time.Now()
	ata, _, err := solana.FindAssociatedTokenAddress(walletPubkey, mint)
	if err != nil {
		log.Fatalf("failed to derive ATA: %v", err)
	}

	// Dummy example public keys (replace with actual ones)
	solMint := solana.MustPublicKeyFromBase58("So11111111111111111111111111111111111111112")
	walletSolAccount := solana.MustPublicKeyFromBase58("6MF8zKwWjrg5Rbt5We8y9ypu7aQzGbc2JHrAZSJiBNCF")
	tokenProgram := solana.TokenProgramID
	systemProgram := solana.SystemProgramID
	associatedTokenProgram := solana.MustPublicKeyFromBase58("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")
	programId := solana.MustPublicKeyFromBase58("MEViEnscUm6tsQRoGd9h6nLQaQspKj7DB2M5FwM3Xvz") // your on-chain arb program

	// Example tokenPools slice (empty here — fill with actual pools)
	var tokenPools []TokenPool

	pool := TokenPool{
		XMint:          mint,
		WalletXAccount: ata,                    //solana.MustPublicKeyFromBase58("E1SsaCT4eaKATYKKDb9RCWAf9HsdTN5w3uhvvNgHyqbd"),
		RaydiumPools:   tradeDetails.Raydium,   // Not used in this tx
		RaydiumCPPools: tradeDetails.RaydiumCP, // Not used in this tx
		PumpPools:      tradeDetails.Pump,
		DLMMPairs:      tradeDetails.DLMM,
	}

	tokenPools = append(tokenPools, pool)

	// Call your function
	instruction := GenerateOnchainSwapInstruction(
		walletPubkey,
		solMint,
		walletSolAccount,
		tokenProgram,
		systemProgram,
		associatedTokenProgram,
		tokenPools,
		programId,
		1000, // minimumProfit
		50,   // maxBinToProcess
	)

	tipIx := system.NewTransferInstruction(
		MinTipLamports,
		walletPubkey,
		solana.MustPublicKeyFromBase58(FastTipPubkey),
	).Build()

	// t2 := time.Now()
	// priceIx := compute_budget.NewSetComputeUnitPriceInstruction(uint64(globals.Min(int(tradeDetails.CUPrice), config.MaxCUPrice))).Build() // 5000 µlamports = 0.000005 SOL per CU
	priceIx := compute_budget.NewSetComputeUnitPriceInstruction(uint64(10000)).Build() // 5000 µlamports = 0.000005 SOL per CU
	limitIx := compute_budget.NewSetComputeUnitLimitInstruction(uint32(config.CuLimit)).Build()

	// t25 := time.Now()

	lookupTableAccount := globals.AltAddress // ALT public key you're using

	tableKeys := []solana.PublicKey{}
	writableIndexes := []uint8{}
	readonlyIndexes := []uint8{}

	for i, key := range lookupTableAccount.Addresses {
		for _, ix := range []solana.Instruction{limitIx, priceIx, instruction} {
			for _, acct := range ix.Accounts() {
				if acct.PublicKey.Equals(key) {
					tableKeys = append(tableKeys, key)
					if acct.IsWritable {
						writableIndexes = append(writableIndexes, uint8(i))
					} else {
						readonlyIndexes = append(readonlyIndexes, uint8(i))
					}
				}
			}
		}
	}
	fmt.Println(tipIx)
	tx, err := solana.NewTransaction(
		[]solana.Instruction{tipIx, limitIx, priceIx, instruction}, // pass your instruction here
		blockhashrefresh.GetCachedBlockhash(),
		solana.TransactionPayer(walletPubkey),
		solana.TransactionAddressTables(map[solana.PublicKey]solana.PublicKeySlice{
			globals.AltPubKey: lookupTableAccount.Addresses, // include all, or just filtered subset
		}))
	if err != nil {
		log.Fatalf("failed to create transaction: %v", err)
	}
	tx.Message.SetVersion(solana.MessageVersionV0)

	// t3 := time.Now()
	// Sign the transaction
	_, err = tx.Sign(
		func(key solana.PublicKey) *solana.PrivateKey {
			if key.Equals(walletPubkey) {
				return globals.PrivateKey
			}
			return nil
		},
	)
	if err != nil {
		log.Fatalf("failed to sign transaction: %v", err)
	}

	// t4 := time.Now()
	// txBytes, err := tx.MarshalBinary()
	// fmt.Printf("First byte: %v\n", txBytes[0])
	// fmt.Printf("Transaction version: %v\n", tx.Message.GetVersion())

	// Serialize to base64
	serializedTx, err := tx.MarshalBinary()
	if err != nil {
		fmt.Println("failed to serialize tx: %w", err)
	}
	base64Tx := base64.StdEncoding.EncodeToString(serializedTx) // string
	fmt.Println("Base64 TX (first 10 chars):", base64Tx[:10])
	fmt.Println("Is string?", reflect.TypeOf(base64Tx).Kind() == reflect.String)
	fmt.Println("MinTipLamports:", MinTipLamports)

	// Prepare JSON-RPC payload
	payload := map[string]interface{}{
		"jsonrpc": "2.0",
		"id":      1,
		"method":  "sendTransaction",
		"params": []interface{}{
			base64Tx, // ✅ This should be a base64-encoded *string*
			map[string]bool{
				"frontRunningProtection": false,
			},
		},
	}
	payloadBytes, err := json.Marshal(payload)
	if err != nil {
		fmt.Println("failed to marshal JSON: %w", err)
	}

	// Send POST request
	req, err := http.NewRequest("POST", FastURLEngines, bytes.NewBuffer(payloadBytes))
	if err != nil {
		fmt.Println("failed to create request: %w", err)
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("x-api-key", ApiKey)

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("request failed: %w", err)
	}
	defer resp.Body.Close()

	// Log response
	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		fmt.Println("failed to decode response: %w", err)
	}
	log.Printf("Transaction sent: %+v", result)
	fmt.Println("ats")
	////////////////////////////////////
	// // Send it
	// txSig, err := globals.RPCClient.SendTransactionWithOpts(
	// 	context.TODO(),
	// 	tx,
	// 	rpc.TransactionOpts{
	// 		SkipPreflight:       true,
	// 		PreflightCommitment: rpc.CommitmentFinalized,
	// 	},
	// )

	// finish := time.Now()

	// // fmt.Println(t1.Sub(start))
	// // fmt.Println(t2.Sub(t1))
	// // fmt.Println(t25.Sub(t2))
	// // fmt.Println(t3.Sub(t25))
	// // fmt.Println(t4.Sub(t3))
	// // fmt.Println(finish.Sub(t4))
	// fmt.Println("Total tx submission time: ", finish.Sub(start))
	// if err != nil {
	// 	log.Fatalf("failed to send transaction: %v", err)
	// }

	// log.Println(time.Now().Format("2006-01-02 15:04:05"), " Transaction sent:", txSig, "Total tx submission time: ", finish.Sub(start))

}
